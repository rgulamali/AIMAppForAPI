@page "/"
@using System.Net.Http.Headers
@using Newtonsoft.Json
@using AIMAppForAPI.Model
@using Microsoft.AspNetCore.Components.QuickGrid



<button @onclick=FetchData>Get ALL Data from API</button>

<button @onclick=FilterData>Filter Data After January 1, 1970</button>

<button @onclick=SaveilterDataToTextFile>Save Filtered Data To TextFile</button>


<h3>Product List</h3>







@if (@productList == null)
{
    <p><em>Loading ......</em></p>

    
}
else
{
    
    @* <table class="table">
        <thead>
            <tr>
                <th>Created At</th>
                <th>Description</th>
                <th>Price</th>
                <th>SKU Number</th>
                <th>Updated At</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in productList)
            {
                <tr>
                    <td>@product.createdAt</td>
                    <td>@product.description</td>
                    <td>@product.price</td>
                    <td class="wrapped-text">@product.sku</td>
                    <td>@product.updatedAt</td>
                </tr>
            }
        </tbody>
    </table> *@
    <h3>Product List count = @PoductListCount</h3>
    <QuickGrid Items="productList.AsQueryable()">
        <PropertyColumn Property="@(p => p.createdAt)" Sortable="true" Align="Align.Center" />
        <PropertyColumn Property="@(p => p.description)" Sortable="true" Align="Align.Center" />
        <PropertyColumn Property="@(p => p.price)" Sortable="true" Align="Align.Center" />
        <PropertyColumn Property="@(p => p.sku)" Sortable="true" Align="Align.Center" Class="flexi-grid" />
        <PropertyColumn Property="@(p => p.updatedAt)" Sortable="true" Align="Align.Center" />

    </QuickGrid>
}



@code{
    public List<Product> productList = new List<Product>();
    public List<Product> filteredProductList = new List<Product>();
    public string? SearchString="";

    public HttpClient httpClient = new HttpClient();
    public int PoductListCount = 0;

    private async Task FilterData()
    {
        this.productList.Clear();
        await FetchData();
        string dateInput = "Jan 1, 2022";
        var parsedDate = DateTime.Parse(dateInput);
        var chars = new[] { ',' };
        foreach (Product p in productList)
        {
            var mydoubleTimeStamp = Convert.ToDouble(p.createdAt);
            var myDate = UnixTimeStampToDateTime(mydoubleTimeStamp);
            if (myDate >= parsedDate)
            {
                filteredProductList.Add(p);
            }
        }
        PoductListCount = 0;
        PoductListCount = filteredProductList.Count;
        productList = filteredProductList;
        
        
    }

    private void SaveilterDataToTextFile()
    {
        productList.ExportToTextFile("SavedLists.txt", ';');
    }
    private static DateTime UnixTimeStampToDateTime( double unixTimeStamp )
    {
        // Unix timestamp is seconds past epoch
        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        dateTime = dateTime.AddSeconds( unixTimeStamp ).ToLocalTime();
        return dateTime;
    }

    


   
    private async Task FetchData()
    {
        try
        {
            //products = await httpClient.GetFromJsonAsync<List<Product>>("https://1ryu4whyek.execute-api.us-west-2.amazonaws.com/dev/skus");
            productList.Clear();
            PoductListCount = 0;
            var url = $"https://1ryu4whyek.execute-api.us-west-2.amazonaws.com/dev/skus";
            var parameters = $"";

            HttpClient client = new HttpClient();
            client.BaseAddress = new Uri(url);
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            HttpResponseMessage response = await client.GetAsync(parameters).ConfigureAwait(false);
            if (response.IsSuccessStatusCode)
            {
                var jsonString = await response.Content.ReadAsStringAsync();
                productList = JsonConvert.DeserializeObject<List<Product>>(jsonString);
                PoductListCount = productList.Count;
            }

        }
        catch (Exception ex)
        {

            string errorMessage = ex.ToString();
        }
    }


    [Serializable]
    public class Product
    {
       
        public string createdAt { get; set; }
        public string description { get; set; }
        public string price { get; set; }
        public string sku { get; set; }
        public string updatedAt { get; set; }

    }

    

}

